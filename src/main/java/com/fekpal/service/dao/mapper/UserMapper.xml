<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fekpal.dao.mapper.UserMapper">
    <cache/>

    <select id="selectByPrimaryKey" parameterType="int" resultMap="result">
        select * from user
        where user_id = #{id}
    </select>

    <select id="selectFirstByExample" resultMap="result">
        select * from user
        <where>
            ${ex.sqlSegment}
        </where>
        limit 1
    </select>

    <select id="selectByExample" resultMap="result">
        select * from user
        <where>
            user_id >= #{offset}
            and ${ex.sqlSegment}
        </where>
        limit #{limit}
    </select>

    <select id="countByExample" resultType="int">
        select count(*) from user
        <where>
            ${ex.sqlSegment}
        </where>
    </select>

    <insert id="insert" parameterType="User" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert into user(
        user_name, password,
        email, phone,
        user_key, login_ip,
        login_time, register_ip,
        register_time, authority,
        user_state)
        values (
        #{userName}, #{password},
        #{email}, #{phone},
        #{userKey}, #{loginIp},
        #{loginTime}, #{registerIp},
        #{registerTime}, #{authority},
        #{userState})
    </insert>

    <insert id="insertLoop" parameterType="list" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id">
        insert into user(
        user_name, password,
        email, phone,
        user_key, login_ip,
        login_time, register_ip,
        register_time, authority,
        user_state)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.userName}, #{item.password},
            #{item.email}, #{item.phone},
            #{item.userKey}, #{item.loginIp},
            #{item.loginTime}, #{item.registerIp},
            #{item.registerTime}, #{item.authority},
            #{item.userState})
        </foreach>
    </insert>

    <update id="updateByPrimaryKey" parameterType="User">
        update user set
        password = #{password},
        email = #{email},
        phone = #{phone},
        login_ip = #{loginIp},
        login_time = #{loginTime},
        user_state = #{userState}
        where user_id = #{userId}
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="User">
        update user set
        <set>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="loginIp != null">
                login_ip = #{loginIp},
            </if>
            <if test="loginTime != null">
                login_time = #{loginTime},
            </if>
            <if test="userState != null">
                user_state = #{userState},
            </if>
        </set>
        where user_id = #{userId}
    </update>

    <update id="updateByExample">
        update user set
        password = #{obj.password},
        email = #{obj.email},
        phone = #{obj.phone},
        login_ip = #{obj.loginIp},
        login_time = #{obj.loginTime},
        user_state = #{obj.userState}
        <where>
            ${ex.sqlSegment}
        </where>
    </update>

    <update id="updateByExampleSelective">
        update user set
        <set>
            <if test="password != null">
                password = #{obj.password},
            </if>
            <if test="email != null">
                email = #{obj.email},
            </if>
            <if test="phone != null">
                phone = #{obj.phone},
            </if>
            <if test="loginIp != null">
                login_ip = #{obj.loginIp},
            </if>
            <if test="loginTime != null">
                login_time = #{obj.loginTime},
            </if>
            <if test="userState != null">
                user_state = #{obj.userState},
            </if>
        </set>
        <where>
            ${ex.sqlSegment}
        </where>
    </update>

    <update id="deleteByPrimaryKey" parameterType="int">
        update user set
        user_state = 0
        where user_id = #{id}
    </update>

    <update id="deleteByExample">
        update user set
        user_state = 0
        <where>
            ${ex.sqlSegment}
        </where>
    </update>

    <resultMap id="result" type="User">
        <id property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="loginIp" column="login_ip"/>
        <result property="loginTime" column="login_time"/>
        <result property="userKey" column="user_key"/>
        <result property="registerIp" column="register_ip"/>
        <result property="registerTime" column="register_time"/>
        <result property="userState" column="user_state"/>
    </resultMap>
</mapper>