<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fekpal.dao.mapper.MessageReceiveMapper">
    <cache/>

    <select id="selectByPrimaryKey" parameterType="int" resultMap="result">
        select * from message_receive
        where id = #{id}
    </select>

    <select id="selectFirstByExample" resultMap="result">
        select * from message_receive
        <where>
            ${ex.sqlSegment}
        </where>
        limit 1
    </select>

    <select id="selectByExample" resultMap="result">
        select * from message_receive
        <where>
            id >= #{offset}
            ${ex.sqlSegment}
        </where>
        limit #{limit}
    </select>

    <select id="countByExample" resultType="int">
        select count(*) from message_receive
        <where>
            ${ex.sqlSegment}
        </where>
    </select>

    <insert id="insert" parameterType="MessageReceive" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into message_receive(
        message_id, receive_id,
        read_flag, available,
        message_title, release_name,
        release_time)
        values (
        #{messageId}, #{receiveId},
        #{readFlag}, #{available},
        #{messageTitle}, #{releaseName},
        #{releaseTime})
    </insert>

    <insert id="insertLoop" parameterType="list" useGeneratedKeys="true" keyProperty="id" keyColumn="iid">
        insert into message_receive(
        message_id, receive_id,
        read_flag, available,
        message_title, release_name,
        release_time)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.messageId}, #{item.receiveId},
            #{item.readFlag}, #{item.available},
            #{item.messageTitle}, #{item.releaseName},
            #{item.releaseTime})
        </foreach>
    </insert>

    <update id="updateByPrimaryKey" parameterType="MessageReceive">
        update message_receive set
        read_flag = #{readFlag},
        available = #{available}
        where id =#{id}
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="MessageReceive">
        update message_receive
        <set>
            <if test="readFlag != null">
                read_flag = #{readFlag},
            </if>
            <if test="available != null">
                available = #{available},
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="updateByExample">
        update message_receive set
        read_flag = #{readFlag},
        available = #{available}
        <where>
            ${ex.sqlSegment}
        </where>
    </update>

    <update id="updateByExampleSelective">
        update message_receive
        <set>
            <if test="readFlag != null">
                read_flag = #{readFlag},
            </if>
            <if test="available != null">
                available = #{available},
            </if>
        </set>
        <where>
            ${ex.sqlSegment}
        </where>
    </update>

    <update id="deleteByPrimaryKey" parameterType="int">
        update message_receive set
        available = 0
        where id = #{id}
    </update>

    <update id="deleteByExample">
        update message_receive set
        available = 0
        <where>
            ${ex.sqlSegment}
        </where>
    </update>

    <resultMap id="result" type="MessageReceive">
        <id property="id" column="id"/>
        <result property="messageId" column="message_id"/>
        <result property="receiveId" column="receive_id"/>
        <result property="releaseName" column="release_name"/>
        <result property="messageTitle" column="message_title"/>
        <result property="releaseTime" column="release_time"/>
        <result property="readFlag" column="read_flag"/>
        <result property="available" column="available"/>
    </resultMap>
</mapper>